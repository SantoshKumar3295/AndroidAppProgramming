#+latex_class: cn-article
#+latex_header: \lstset{language=c++,numbers=left,numberstyle=\tiny,basicstyle=\ttfamily\small,tabsize=4,frame=none,escapeinside=``,extendedchars=false,keywordstyle=\color{blue!70},commentstyle=\color{red!55!green!55!blue!55!},rulesepcolor=\color{red!20!green!20!blue!20!}}
#+title: Android App Programming Directed Study ~ DrawingFun
#+author: Jenny Huang

* first checkin 10/27/2014
** Goal
  - According to the instructor's requirements that we are going to implement an simple window's Paint like Android app for later on integrating Unicon's 2D graphics to Android app.
** Course Introduction
  - We have only two students, the other one is an udnergraduate exchange students with solid Java programming background and relatively slightly week problem-solving skills. For the first more than half semester, we used Sudoku as the starting point and tried several different topics to get our hands wet. 
** Project Introduction
  - It's after middle term already, the way we were currently trying on to make it work may just work perfectly for the other classmate, but for me, I feel like it takes forever for me to be able to make any significant progress. So about half a month ago, I was motivated and thought instead of surfacing around and having fun learning by trial and error, maybe I should start from an simple GUI app as a starting point and try my best to expend/extend the APP functionality from there. And also we would be able to work to our final project slightly earlier. 
  - This GUI will be my very second GUI interface that I have ever created for my Computer Science major, (this first one was an Python Tkinter GUI one week short project for plotting graphics with data abstracted from backend database during an internship;). And I guess it may still be slightly difficult for me to start write Android App code of my own line by line, so I simply searched internet, and trying an tutorial to make a working starting point Android Paint GUI. I integrated the codes from the reference link all together, fixed minor compile errors, and it worked!
  - This "Copied" GUI will serve as the starting point, and my functionality updates start from here, and I will update my progress for this project later on by week according to the instructor's requirements and suggestions. 
** References
  - http://code.tutsplus.com/tutorials/android-sdk-create-a-drawing-app-interface-creation--mobile-19021
  [[./android_drawing_final.png]]

* Checkin for 11/3/2014 
** Buttons I have worked on
*** Color_Picker:
*** Undo/Redo:

** Functionalities and References
*** Color_Picker:
  - Motivated by the Picasso Android app, seeing their multiple color choices, our starting point *12* fixed colors were too limited. 
*** Undo/Redo Buttons:
  - Also motivated by the Picasso app, intended to work on *Undo* button, and ended up found *Redo* button could be very convenient as well. 
  - needs to update these Undo/Redo methods later on, this is just the starting point most basic implementation for this button set.
** Snapshot
[[./20141103.png]]

** Todo
*** Drawing shapes with Finger for primitives
  refer to the reference below: 
  - http://gmariotti.blogspot.com/2014/01/drawing-shapes-with-fingers.html
  - This button will be first priority to finish
*** Load image file button
*** Erase Rectangle
*** Undo/Redo
* Checkin for 11/10/2014
** Buttons I have worked on
*** shapeBtn for primitives

** Functionalities and References
*** shapeBtn for primitives: Drawing shapes with Finger for primitives
  - refer to the reference below for some basic shapes: line, smooth line, circle, triangle, Rectangle, square
  - http://gmariotti.blogspot.com/2014/01/drawing-shapes-with-fingers.html
  - *ListView* in *Alert Dialog* is searched from online without direct reference.
  - Since the erase was using draw smooth line. This button works also means that I could erase a "*Rectangle*" shape, or "*Circle*" shape.
  - I have other course priority for the passed week, so I just have enough time to finish this course's priority, but I will try to work harder in order to finish all the functionalities for this course.
  - It's not a good looking ListView, but yet it's a fully functional button.
  - This button right now is fully functional, but to finish this project first, I have not spent any quality time to expand any primitives yet, rather than the existing six ones from the reference listed below. 
** Snapshot
[[./20141110-14-27-05.png]]
** Special Situation
  - There were too many students piled/lined up in front of Dr. Jeffery's door, and he didn't break the line by stating that it's our direct study time. So the other classmate and I just stepped away from his office, and we didn't really meet during last week. 
  - The other classmate and I have talked, and we happened to have worked on the same shapeBtn, I applied ListView in a dialog box with all six drawing shapes applied, and he created a (ListView? not sure) with a clickable button as one element with four shapes applied. And he agreeed my ListView looked way prettier than his buttons did. 
  - But I am willing to and more than happy to think that he could have worked on something else important for him that I actually didn't have time to work on during the passed week.
** Todo
  - Load image file button
  - Erase Rectangle
  - Undo/Redo
  - Fill paint

* Checkin for 11/17/2014
** Buttons I have worked on
  - openBtn for loading an image file as an ImageView
  - Undo/Redo
** Functionalities and References
*** openBtn for loading an image file as an ImageView
  - The method I applied is memory saving for AsyncTask, which is better than load images directly, which could potentially block UI for couple of seconds;
  - Loaded an image from online, but would like to try load internal images from device later on, like a drawing which I saved earlier onto my internal device;
  - Potentially apply layer oncepts to produce multiple layer drawing, needs suggestions to organize my idea how to implement this feature.
  - *Question*: Right now, my image is an ImageView in my layout, what ideas that I could use to set/change/transfer my ImageView to be my draw view background?
  - References:
    
    http://www.learn2crack.com/2014/06/android-load-image-from-internet.html

    http://stackoverflow.com/questions/5776851/load-image-from-url

    https://github.com/koush/UrlImageViewHelper

*** Undo/Redo
  - After implemented subclass SuperActivity class which extends Activity on week checkin for 11/10/2014 for my ListView implementation, subclass of Path() was very difficult for me to think about implement before, but after my trial on ListView, super/sub class in Java all made sense to me now. It's a piece of cake, and I know I can wrap whatever material I need in order to paint nice and neat. 
  - Implemented by developing a subclass myPath to wrap the super Path(), drawPaint color, and drawPaint strokesize together as an object. 
  - Based on previous progress that I can undo/redo only with all the drawCanvas with the same paint color, now my updo/redo paths could be colorful and with various strokesizes. 
  - References:

    Path() library:

    http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/2.3.1_r1/android/graphics/Path.java
    
    Bitmap cacheing:

    http://stackoverflow.com/questions/3406910/efficient-2d-drawing-in-android/3408641#3408641

  - *Questions*: 

    1. Undo/Redo for simple path seem to behavor fairly ok, but instead of lineTo wired line, how do I implement smooth line? How could I differentiate different strokesizes more clear with lines I have so far?
 
    2. One little detail though, I dras after touch up, my paint color change delayed, how do I implement *real time*?

       *Answered*: drawPath.reset() produced all the trouble. 
 
    3. About previous ListView six different shapes, with Undo/Redo properly functionaing, I realize I just lost my siz shapes again cause I need to rewrite/implement methods in order for them to be able to Undo/Redo ~? (My subclass works perfectly for this propose, just that I lost my internal link to primitives, which means I probably should rewrite my primitives draw methods according to undo/redo prerequirements. I don't think it will be difficult, but I don't have enough time for this for the pass week, and I need to organize my ideas about these implementation clear. )

   4. I prioritize undo/redo to be more important than any other buttons cause I know they would give me great practise together with primitives implementation methods rewrite. So I have not touch "Erase Rectangle" button and "paint fill" button yet. According to these idea, I would prioritize Rectangle rewrite with the highest priority, so that later on I can follow up with erase Rectangle (which means draw Rectangle first, fill with background color, and undo could remove this erase step). Correct me if I am wrong. 

*** References: all about Android
  - https://github.com/kesenhoo/android-training-course-in-chinese

** Snapshot
[[./Screenshot_2014-11-17-15-11-20.png]]
** Todo
  Only two button left untouched, could do the following or anything I am interested to implement. 
  - Erase Rectangle
  - Fill paint

  May try to *save* into Galaxy... as Dr. Jeffery mentioned it last time when we meet during class;

  Potential interests: may implement depends on how I spend thanksgiving ~~
  - touch ImageView Activities: zoomin, zoomout, rotate, fading, etc
  - SurfaceView rotate images through new thread
  - canvas save() and restore()
  - OpenGL spinning circle
  - widely used draw methods
  - Easy draw operations

* Checkin for 12/01/2014
** Buttons I have worked on
  - ImageView to Bitmap
  - start newBtn
  - Undo/Redo
** Functionalities and References
*** ImageView to Bitmap
- Worked on Bitmap so that I can load a picture as my drawView background;
- This could be considered to be a trial, and could try to add user options to different background pictures later on;
*** start newBtn
- Realized that my newBtn lost its functionality during last checkin because of different mechanisms, and I fixed it after having implemented undo/redo for paths;
- The wired drawing path shapes (like the dramatic curves in previous Snapshot) got corrected as well by writing to Bitmap;
- References: mutuable immutable bitmaps 

  http://stackoverflow.com/questions/13119582/android-immutable-bitmap-crash-error
- But I still failed to start new because some minor error about implementation. I uninstalled the app and restart, the error was still there;
- I was so focused on the mView thing that I completely lost track of the true reason. Once I asked and the instuctor helped explain that invalidate() simply calls onDraw() function, I could immediately realize that I forgot to clean my undo/redo arraylist paths and undonePaths! It was the invalidate() function blocked me from relaxing from the mview, and it DID block me for about one hour this afternoon. Realizing that I hated me had ever been wasting my life so stupid! And right now I am on my way following the good habit reading Qt creator documents systematically before googling the correct answer only when I try to solve my technical difficulties, which is good. 
*** Undo/Redo
- If I really don't want to separate/pack my ListView items into objects, will it be possible for me to use command pattern instead, and how difficult could command pattern to be comparatively spearking?
- References:
  List: 
  - http://stackoverflow.com/questions/11114625/android-canvas-redo-and-undo-operation
  Command Pattern:
  - http://www.28im.com/android/a141932.html
  - http://www.javaworld.com/article/2077569/core-java/java-tip-68--learn-how-to-implement-the-command-pattern-in-java.html
  - http://www.28im.com/android/a141932.html
  - http://blog.csdn.net/lovingprince/article/details/1532869
  - http://www.2cto.com/kf/201409/333267.html
  - http://www.2cto.com/kf/201406/309574.html
  - http://blog.csdn.net/rhljiayou/article/details/7212620
- Answers: 
  - We didn't really talk about command patterns at all this afternoon, but rether to solve both the other classmate's and my technical difficulties, and also discussions about my interested parts including multiple layers Potentials when using Bitmap and removing any layers afterwards, and autosave nsapshots if we save bitmap every 20 minutes, and Potential values we could apply with those save displays in paths & undonePaths during each 20 minoutes interval. I began to realize that I COULD have my own creative ideas whenever I began to understand things, like I spent hours today just to understand Bitmap~
** Snapshot
[[./Screenshot_2014-12-01-15-32-21.png]]
** Todo
- finish the undone functions and wrap up project and do basic demo on coming Monday;
- short about one page summary, could at most to be 2 pages;
